<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blogj!]]></title>
  <link href="http://jayzee.github.io/atom.xml" rel="self"/>
  <link href="http://jayzee.github.io/"/>
  <updated>2016-06-09T20:35:43-04:00</updated>
  <id>http://jayzee.github.io/</id>
  <author>
    <name><![CDATA[Josh Zizmor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Date.parse() Work on Safari]]></title>
    <link href="http://jayzee.github.io/blog/2016/06/09/making-date-dot-parse-work-on-safari/"/>
    <updated>2016-06-09T16:10:38-04:00</updated>
    <id>http://jayzee.github.io/blog/2016/06/09/making-date-dot-parse-work-on-safari</id>
    <content type="html"><![CDATA[<p>I recently finished a project where I needed to figure out how long ago a blog post was submitted. I was using javascript and had the date that the post was submitted as a string that looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var datePublished = "2016-05-09 11:03:00"</span></code></pre></td></tr></table></div></figure>


<p>In order to be able to make calculation the first thing I did was changed the datePublished variable from a string into milliseconds. Date.parse returns the number of milliseconds since January 1, 1970. Initially this seemed straightforward. I used Date.parse like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Date.parse(datePublished)</span></code></pre></td></tr></table></div></figure>


<p>Once I had the millisecond value I could find the difference between that number and the millisecond value of the current time. This was working great when I checked out the site on Chrome BUT when I went to look at the site in Safari I saw a big <strong>NaN</strong> where the time difference should be.</p>

<p>It turns out that Safari does not support Date.parse(). What should I do?</p>

<p>I searched around the web and found a cool javascript library called <a href="momentjs.com">Moment.js</a>. Moment.js lets you parse, manipulate and display dates. It turns strings with date information into moment object which you can then act on. I created a moment object by doing this &lsquo;moment(publishedDate)&rsquo;. Once I had the date as a moment object I could turn it into millisecond by calling a valueOf() method that is part of moment.js library.</p>

<p>Here&rsquo;s the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var datePublished = "2016-05-09 11:03:00"
</span><span class='line'>publishedTime = moment(publishDate).valueOf();
</span></code></pre></td></tr></table></div></figure>


<p>publishedTime now has the milliseconds of the date since January 1, 1970! It&rsquo;s a number that I can subtract from other numbers to find the time difference. Problem solved. Amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Ways to Nicely Alert Users in Javascript]]></title>
    <link href="http://jayzee.github.io/blog/2016/04/18/5-ways-to-nicely-alert-users/"/>
    <updated>2016-04-18T15:51:42-04:00</updated>
    <id>http://jayzee.github.io/blog/2016/04/18/5-ways-to-nicely-alert-users</id>
    <content type="html"><![CDATA[<p>While working on my latest project I came across <a href="http://lipis.github.io/bootstrap-sweetalert/">SweetAlert for Bootstrap</a>. Sweetalert is a simple to use
alert tool in javascript. Instead of writing &lsquo;alert&rsquo; and get the browser&rsquo;s standard messaging Sweetalert creates a nicely styled alert box that even has the options for
several nice success and alert graphics.</p>

<p>Here&rsquo;s how to use it. Just add the following to your javascript.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swal("Here's a message!")</span></code></pre></td></tr></table></div></figure>


<p>This would produce this message:</p>

<p><img src="http://joshzizmor.com/fi/sweetalert-basic.png" width=400></p>

<p>Sweetalert also has easy to create success confirmation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swal("Good job!", "You clicked the button!", "success")</span></code></pre></td></tr></table></div></figure>


<p><img src="http://joshzizmor.com/fi/sweetalert-success.png" width=400></p>

<p>There&rsquo;s also option for a confirmation alert box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swal({
</span><span class='line'>  title: "Are you sure?",
</span><span class='line'>  text: "Your will not be able to recover this imaginary file!",
</span><span class='line'>  type: "warning",
</span><span class='line'>  showCancelButton: true,
</span><span class='line'>  confirmButtonClass: "btn-danger",
</span><span class='line'>  confirmButtonText: "Yes, delete it!",
</span><span class='line'>  closeOnConfirm: false
</span><span class='line'>},
</span><span class='line'>function(){
</span><span class='line'>  swal("Deleted!", "Your imaginary file has been deleted.", "success");
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><img src="http://joshzizmor.com/fi/sweetalert-confirmation-needed.png" width=400></p>

<p>Sweetalert is simple and easy to use but their are other alert tools in javascript that may be helpful for your next projects. Here are a few more:</p>

<ul><li><a href="https://github.com/akquinet/jquery-toastmessage-plugin">jQuery Toastmessage</a> - This JQuery plugin  provides android-like notification messages. The toasted messages arrive on the screen in a seamless and natural way.</li>

<li><a href="http://www.greepit.com/notify/">Notify</a> - jQuery plugin which adds simple notifications bars that you can use on your website and application to assist users while they fill in forms, navigate through pages or interact with interface.</li>

<li><a href="http://danielraftery.com/read/Sticky-A-super-simple-notification-system-for-jQuery">Sticky</a> - A super simple notification system for jQuery</li>


</li></ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth is a knife wielding maniac that is trying to kill me]]></title>
    <link href="http://jayzee.github.io/blog/2016/04/04/fortress-of-solitude/"/>
    <updated>2016-04-04T16:37:01-04:00</updated>
    <id>http://jayzee.github.io/blog/2016/04/04/fortress-of-solitude</id>
    <content type="html"><![CDATA[<p>I spent most of last weekend trying to get Oauth to work with with a javascript application.
I learned a lot about what oauth is, why it is &lsquo;potentially helpful,&rsquo; and, most importantly, when not to use it.</p>

<p>Oauth is required by a number of popular web platforms in order to interact with their API.
I was trying to use the Twitter API which requires oauth authentication before
Twitter will share or accept any information. Ruby makes it really simple to setup this
authentication using a gem but since I had a single page javascript site I tried to set up
oauth authentication with an ajax call. This was a mistake which I will explain in more depth later.</p>

<p><img src="https://hueniversedotcom.files.wordpress.com/2009/09/oauth-shine.png?w=600&h=598" width="250"  hspace="20" align="right"></p>

<p><strong>What is OAuth?</strong><br>
Let&rsquo;s take a step back and try to understand what Oauth is and why so many APIs require it.
Twitter defines it like this, &ldquo;OAuth is an authentication protocol that allows users to approve application
to act on their behalf without sharing their password.&rdquo; OAuth creates a way for users to
grant third-party access to their resources
without the need to share their passwords. It also provides a way to grant access in a more limited way
like duration and scope.</p>

<p>Think of oauth as a fancy way to authenticate. It allows one service to gain access to a user&rsquo;s
restricted content from another service without needing to receive the user&rsquo;s username or password
from the original service. For example, what if you want catfinder.com to automatically post to your Twitter account
every time a new cat shows up in your neighborhood. Catfinder will go through Twitter to
ask you (the user) permission to be allowed to post to your twitter account.</p>

<p>Today there are lots of different cloud services with various logins like Facebook, Gmail, and Twitter . Asking users to have unique
password for every single service will actually reduce the level of security since people will
just start using very simple password like 1,2,3,4 or the same password. It&rsquo;s simpler if a user
can have a unique username and password with Twitter. Oauth lets a user leverage the username and password they
have to gain access to other services.</p>

<p>Here&rsquo;s the basic user flow that a user sees:</p>

<ol>
<li>The user wants catfinder.com to automatically post to their twitter account. Catfinder says, let me go ask twitter.</li>
<li>Catfinder reaches out to twitter to ask permission. Twitter gives out a request token and a secret (cryptic string). The secret is
used by the user to verify they are coming from Catfinder.</li>
<li>The user is redirected to the Twitter to approve Catfinder.</li>
<li>The user gives permission to Twitter to let Catfinder post on the user's feed.</li>
<li>Catfinder requests an access token from Twitter. Twitter responds with an access token.</li>
<li>Catfinder posts to the users twitter.</li>
</ol>


<p>Here&rsquo;s the benefits, our hero (the user) never had to share their login credentials with Catfinder all he did was delegate access using Oauth. The user can login into Twitter and revoke permission from Catfinder any
time he&rsquo;s no longer wants pictures of cats in his twitter feed.</p>

<p><img src="http://community.hpe.com/t5/image/serverpage/image-id/27081i8E0E5881BA360900?v=lz-1"></p>

<p><strong>Why did OAuth ruin my weekend?</strong><br>
Twitter no longer allows user to request data without setting up oauth. This can
be easily handled with a ruby gem or a wrapper if you are using node.js but if you are not using
a backend and just writing vanilla javascritp it is extremely difficult. Why is it so difficult?
The reason is that its very hard to make key and token strings hidden without a backend. A visitor to your
site can find a way to see them.</p>

<p>When you decide you want to access Twitter&rsquo;s API they will give you the following information
that you will need to include as part of your API&rsquo;s authentication.</p>

<p><ul><li>Consumer Key</li>
<li>Consumer Secret</li>
<li>Request Token URL</li>
<li>Authorize URL</li>
<li>Access Token URL</li></p>

<p>Handing these off in the correct method and order can be difficult but are nicely abstracted out
in a number of different gems, wrappers and packages. Twitter provides a list of libraries:
<a href="https://dev.twitter.com/overview/api/twitter-libraries">https://dev.twitter.com/overview/api/twitter-libraries</a></p>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/_JNGI1dI-e8" frameborder="0" allowfullscreen></iframe></p>

<p><iframe width="420" height="315" src="https://www.youtube.com/embed/Dz2IrS6AlzA" frameborder="0" allowfullscreen></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Me The Ketchup (Secret Stories in Screen Sizes)]]></title>
    <link href="http://jayzee.github.io/blog/2016/03/21/media-queries-and-what-that-means/"/>
    <updated>2016-03-21T17:15:36-04:00</updated>
    <id>http://jayzee.github.io/blog/2016/03/21/media-queries-and-what-that-means</id>
    <content type="html"><![CDATA[<p>Web sites are being served to a large number of different screen sizes and devices types. How do you design and develop a site that looks as nice and pretty on a tiny 4" phone as it doesn on a 25" monitor?</p>

<p><img src="http://ymstudios.com/wp-content/uploads/2014/06/responsive_design_screens.png" align="right"></p>

<p>Before I started coding I worked as a project manager shepherding digital sites and content from the idea phase through the design and development cycles. Over the last few years, as the amount of screen sizes and devices grew, I used all kinds of buzzwords to get this point across to clients. Terms like ‘device agnostic' and &lsquo;mobile first&rsquo; were flagrantly used many times a day.</p>

<p>From a strategy perspective it’s very clear to me why responsive sites are needed and why a site would want to serve up specific content based on the device and screen size that the user has in their hand. What I never understood was how it was actually being implemented by the developers.</p>

<p>I&rsquo;ve had a chance to take a look at how content is delivered, or not delivered based on screen size. It turns out there are several different ways to approach responsive front end development, this blog post will tackle the basics of media query in CSS.</p>

<p>First off, let me define responsive web designs to make sure we are all on the same page.</p>

<p><strong>Responsive web design:</strong></p>

<p>From Wikipedia: <i>&ldquo;Responsive web design (RWD) is an approach to web design aimed at crafting sites to provide an optimal viewing and interaction experience—easy reading and navigation with a minimum of resizing, panning, and scrolling—across a wide range of devices (from desktop computer monitors to mobile phones)</p>

<p>A site designed with RWD adapts the layout to the viewing environment by using fluid, proportion-based grids,flexible images, and CSS3 media queries&hellip;&ldquo;</i></p>

<p>An example:</p>

<p><img src="http://www.joshzizmor.com/fi/clean_air_challenge.jpg"></p>

<p>A mobile phone has much less real estate and may load slower if it&rsquo;s on broadband. When designing for a phone you are going to want to focus on essential functionality and remove images that may supply a rich interactive experience but are unnecessary. Also a user on a phone may be more likely to search based on locations so a designer/developer should optimize for this.</p>

<p>How do we build this? The answer is <strong>Media Queries</strong></p>

<p>Media Queries are used in CSS to grab information from the browser and make decisions based on what comes back. It can procure info like browser width and height, device width and height, orientation (portrait or tablet), and resolution.</p>

<p>In your CSS file you can use a variable called @media to make decisions based on these parameters.</p>

<p>Here&rsquo;s a basic template of how a media query should be set up in your CSS file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@media (query) {
</span><span class='line'>  /* CSS Rules used when query matches */
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a working example. This is saying, that the CSS below should only be used on browser smaller than 480px. The wrapper is then set to 400px and a background image called &lsquo;media-queries-phone.jpg&rsquo; is used. This image is probably proportionally correct for a phone.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@media (max-device-width: 480px) {
</span><span class='line'>    div#wrapper {
</span><span class='line'>      width: 400px;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    div#header {
</span><span class='line'>      background-image: url(media-queries-phone.jpg);
</span><span class='line'>
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Media queries can be compared to IF and ELSE statement. If the query is found true, i.e. the browser is larger than 480px, then the CSS in the block is acted upon. If the query is false then do not act on the CSS in the block.</p>

<p>What if there are more than one item that needs to be checked? For example, only use the CSS on tablets where the browser has a minimum width of 600px and maximum width of 800px. Here&rsquo;s how that would loko:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@media (min-width: 600px) and (max-width: 800px) {
</span><span class='line'>  html { background: red; }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;d like the queries to work like and OR statement then use a comma to separate your queries like below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@media (max-width: 600px), (min-width: 800px) {
</span><span class='line'>  html { background: red; }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Take a look at the list of all the info that media queries have access to.</p>

<p><img src="http://www.joshzizmor.com/fi/responsive_browser_info.png"></p>

<p><br>
Resources &amp; Further Readings:<br>
<a href="http://www.w3schools.com/css/css_rwd_mediaqueries.asp">http://www.w3schools.com/css/css_rwd_mediaqueries.asp</a><br>
<a href="https://www.smashingmagazine.com/2010/07/how-to-use-css3-media-queries-to-create-a-mobile-version-of-your-website/">https://www.smashingmagazine.com/2010/07/how-to-use-css3-media-queries-to-create-a-mobile-version-of-your-website/</a><br>
<a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/use-media-queries?hl=en">https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/use-media-queries?hl=en</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication Token and the Coming Robot Invasion]]></title>
    <link href="http://jayzee.github.io/blog/2016/03/07/the-one-about-authentication/"/>
    <updated>2016-03-07T22:10:04-05:00</updated>
    <id>http://jayzee.github.io/blog/2016/03/07/the-one-about-authentication</id>
    <content type="html"><![CDATA[<p><strong>What the hell is this?</strong></p>

<p><img src="http://www.joshzizmor.com/fi/authentication_token.png"></p>

<p>WTF? Rails is just generating a long string of letters and numbers and nobodies wondering what is going on?!? Are we being tracked? Are we being monitored by an alien race living on the dark side of the moon? How many more days until skynet? Is it a doomsday clock!?! Or is it just the government tracking everything we do?</p>

<p><img src="http://static.comicvine.com/uploads/original/10/106298/3763872-7663450062-indep.jpg" ></p>

<p>Turns out this often misunderstood automatically generated piece of code is protecting us from <strong>cross site request forgery</strong>, a term that does not roll off the tongue, so just call it CSRF.</p>

<p><strong>That doesn&rsquo;t clear anything up. What is CSRF?</strong><br></p>

<p>CSRF is a vulnerability that arises from the way that applications trust a browser&rsquo;s sessions identification. During a CSRF attack, the attacker tricks a separate web application into executing actions. It can potentially trick the victim into submitting malicious actions. CSRF attacks cannot retrieve data but can change states.</p>

<p>Here&rsquo;s an example, let&rsquo;s say you are using a web site called, &lsquo;ForgotTofeedMyCat.com.&rsquo; (FTFMYC) Meanwhile you have another browser tab open to &lsquo;FishFoodFast.com&rsquo;. You click on a picture of fish on FishFoodFast.com that has malicious code. This code utilizes that fact that you are logged into ForgotToFeedmyCat.com and sends a request to ForgotToFeedmyCat.com asking to delete your account including your 1,000,000 rewards points that you have spent years earning.</p>

<p>Luckily Rails 4 and above automatically protects you from the dreaded CSRF attack! Rails 3 has a cookie based solution which can still be attacked so upgrade to Rails 4 immediately. Rails 3 utilized cookies instead of the Rails session helper which left if vulnerable to CSRF attacks.</p>

<p><img src="https://top50sf.files.wordpress.com/2011/08/mars-attacks-opener.jpg"></p>

<p><strong>So how does Rails 4 and above do this magic?</strong><br>
The protect_from_forgery method! <i>Protect_from_forgery</i> is included by default in the application_controller.rb and it is automatically applied when generating new applications.</p>

<p>Here&rsquo;s the high level on how it works. Rails leverages cryptographically random tokens. It places one token in the hidden field, this is the long string of numbers that we see if we inspect the page. It also places one in the user&rsquo;s session. A user session is a piece of memory that maintains a small amount of data about the user. For example if a user put anything in their shopping cart this could potentially be in the session data.</p>

<p>Every time the server has an action it generates and sends  a new token as part of it&rsquo;s response to the browser. When a user responds they resend this token back to the server. If this doesn&rsquo;t match the last one the server sent to you, your request gets aborted since it&rsquo;s likely malicious.</p>

<p>This long string of numbers is secretly added as a hidden input field (aka authenticity_token) to every form.</p>

<p>And if you want to devise your own random token here&rsquo;s the code that Rails uses. It&rsquo;s located in lib/devise.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def self.friendly_token
</span><span class='line'>  SecureRandom.base64(15).tr('+/=lIO0', 'pqrsxyz')
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>::base64 generates a random base64 string. That means there are 64 characters that are available to appear in each spot of the string. The number 15 sets the length of the random string as 15 characters long. Tr works kind of like gsub except its looking for characters instead of strings. Here&rsquo;s an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'abcde'.tr('bda', '123')
</span><span class='line'>#=&gt; "31c2e"
</span><span class='line'>
</span><span class='line'>'abcde'.tr('bcd', '123')
</span><span class='line'>#=&gt; "a123e"</span></code></pre></td></tr></table></div></figure>


<p>The authentication_token is only applied to POST, PATCH and DELETE requests. GET requests do not have tokens since they don&rsquo;t create, alter or destroy&hellip;. unlike our future robot masters!</p>

<p><img src="https://static.perrotin.com/vue/photo/9471_1.jpg?=20150729121805"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Group By &amp;&amp; Having == ?]]></title>
    <link href="http://jayzee.github.io/blog/2016/02/20/group-by-and-and-having-equals-equals/"/>
    <updated>2016-02-20T21:41:16-05:00</updated>
    <id>http://jayzee.github.io/blog/2016/02/20/group-by-and-and-having-equals-equals</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s talk about the GROUP BY and HAVING statements and how to best use them in SQL.</p>

<p>But first &hellip; ROTHKO!</p>

<p><img src="https://www.etc.cmu.edu/projects/atl/images/rothko/rothko3.jpg"></p>

<p>Why Rothko? His work highlights the importance of carefully choosing the items that group together. By &ldquo;grouping&rdquo; specific colors  the piece as a whole is stronger than the individual color. Grouping or picking the right items that go together can heighten or take away from a group. 1 + 1 = 3 or 1 + 1 = -2.
<br ><br >
<strong>Further Proof on the importance of correctly grouping items</strong></p>

<p>Same with food, eating a meal that has flavors that complement each other can bring the plate to the next level (salty and sweet is a killer&hellip; shout out to salted crack caramel ice cream).</p>

<p><img src="https://sprungonfood.files.wordpress.com/2014/08/image_36.jpeg"></p>

<p><strong>1. Group By</strong></p>

<p>What’s up with GROUP BY? Is it as straightforward as it sounds or is there some dark layer hiding underneath that will haunt your SQL statement and return you &lsquo;american cheese&rsquo; when you were expecting &lsquo;Gouda&rsquo;. SQL acts like it&rsquo;s as straight forward as vanilla but there&rsquo;s got to be some chunky monkey hiding beneath the surface. (No more food jokes, I promise.)</p>

<p><strong>Group By - Basics:</strong></p>

<p>Lots of times we have more than one record for a certain attribute. For example, there could be 25 players on the Yankees  in a league with hundreds of players. What if I just want to know how many home runs the Yankees' hit?</p>

<p>OR what if need to know the total sick days for 5 members of the custodial staff in a company of 100 employees?</p>

<p>OR what if I&rsquo;m trying to see the average age of the current members of Parliament Funkadelic and my database has info on everyone who has ever played in the group?</p>

<p>GROUP BY is the key to finding out this kind of critical information in a SQL database.</p>

<p>GROUP BY gathers all of the rows together that contain data in the specified column and will allow aggregate functions to happen to one or more columns.</p>

<p>Let&rsquo;s say you are in charge of a zoo. Let&rsquo;s call it the <i>Flatiron Zoo for Discarded Animals</i>. To keep better records you put together a nice SQL database that looks like this:</p>

<p><img src="http://www.joshzizmor.com/fi/sql.png"></p>

<p>Let’s say I’d like to see how many Mammals I have at my small zoo. I’d want to have a row just for animal types. That’s where GROUP BY can come in handy. I can SUM the items in my select and only show one row of Animal Type.</p>

<p>I&rsquo;d execute this SELECT to see how many of each animal type there is.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT type, SUM(QTY) FROM animals
</span><span class='line'>GROUP BY type
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.joshzizmor.com/fi/sql2.png"></p>

<p><strong>Be Aware, be very aware:</strong></p>

<p>There must be some common missteps that people make, right?</p>

<p>Let&rsquo;s say you run this SQL statement:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT * FROM animals
</span><span class='line'>GROUP BY type
</span></code></pre></td></tr></table></div></figure>


<p>You would get a highly dubious table that looks something like this:<br>
<img src="http://www.joshzizmor.com/fi/sql3.png"></p>

<p>It probably wouldn&rsquo;t be much help since it&rsquo;s basically just given us one row for each animal type.</p>

<p><br>
<strong>2. HAVING</strong><br></p>

<p>So what&rsquo;s the deal with using HAVING? I know it replaces WHERE sometimes but what&rsquo;s the rule&hellip; when should I be using it?</p>

<ol><li><strong>RULE #1:</strong> WHERE does not work with aggregates. For example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT animal_type, sum(Qty) from Animals_in_zoo
</span><span class='line'>GROUP BY animal_type WHERE sum(qty) &gt; 10</span></code></pre></td></tr></table></div></figure>
This does not work. You need a HAVING instead of WHERE if there's an aggregate involved. It should look like this:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT animal_type, sum(Qty) from Animals_in_zoo
</span><span class='line'>GROUP BY animal_type HAVING sum(qty) &gt; 10&lt;/li&gt;</span></code></pre></td></tr></table></div></figure>

<li><strong>RULE #2: </strong>One of the SELECT items has an AS after it.

SELECT animal_type, animal AS animalize from Animals_in_zoo
GROUP BY animal_type HAVING animalize = 'Duck'</li></ol>


<p>Now More ROTHKO</p>

<p><img src="https://upload.wikimedia.org/wikipedia/en/5/5f/No_61_Mark_Rothko.jpg" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Injection of Ruby]]></title>
    <link href="http://jayzee.github.io/blog/2016/02/08/my-first-post-on-octopress/"/>
    <updated>2016-02-08T18:11:03-05:00</updated>
    <id>http://jayzee.github.io/blog/2016/02/08/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Before last week I was convinced that at a fundamental level everything could be built of some combination of an if, else and while loop. I ignored higher level enumerators at all cost. As soon as I saw Ruby&rsquo;s inject method I instinctively tried to avoid it. It seemed confusing and unnecessary. Maybe there were some “advanced” coders who used it but I’m sure I could get around ever needing it.</p>

<p>At some point during last week&rsquo;s lab I was prodded into using it and very quickly the learning curve disappeared and it became a go-to tool.<br></p>

<p>Enumerable#inject is a powerful shortcut, it’s makes summing up items simple and compact.<br></p>

<p>The basics of inject can be done without .inject but it&rsquo;s really clunky. For example:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>counter = 5
</span><span class='line'>sum = 0
</span><span class='line'>while counter &lt;= 10
</span><span class='line'>  sum += 5
</span><span class='line'>  counter += 1
</span><span class='line'>end
</span><span class='line'>return sum</span></code></pre></td></tr></table></div></figure>


<p>Inject is an iterating device lets you pass in a variable that can then be acted upon by all the items that are iterated through. Think of it like a class variable that stays throughout the laps of iteration. Inject then returns the variable which can be the sum of all the laps of iteration.<br></p>

<p>A basic example would work like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2,3,4].inject() do | accumulator, item|
</span><span class='line'>  accumulator += item
</span><span class='line'>end
</span><span class='line'>#=&gt; 9</span></code></pre></td></tr></table></div></figure>


<p>Every item in the range is passed into the inject method. The block is executed one for each element that the inject is called up. In this case the range array has the numbers 2,3 and 4. The block will be executed upon 3 times. The first time the variable ‘item’ will be ‘2’, the second time ‘3’ and the third ‘4’. In each execution the ‘item’ will be added to the ‘accumulator’ variable. Inject is an easy way to sum up all the items in the array! <br></p>

<p>Inject can also be passed a variable so that your ‘accumulator’ doesn’t need to to start at 0. Take a look at this example. <br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2,3,4].inject(20) do | accumulator, item|
</span><span class='line'>  accumulator += item
</span><span class='line'>end
</span><span class='line'>#=&gt; 29</span></code></pre></td></tr></table></div></figure>


<p>The ‘accumulator’ variable is going to start at 20. This information is set directly to the right of the inject method.<br></p>

<p>Inject is now my go to code of choice when summing up items is needed.</p>
]]></content>
  </entry>
  
</feed>
